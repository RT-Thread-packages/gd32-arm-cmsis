import rtconfig
from building import *

# Import environment variables 
Import('env')

# get current directory
cwd = GetCurrentDir()

# The set of source files associated with this SConscript file.
src = Split('''
GD/GD32F30x/Source/system_gd32f30x.c
''')

path = [
    cwd + '/GD/GD32F30x/Include',
    cwd,]

# Map microcontroller units (MCUs) to their corresponding startup files
mcu_startup_files = {
    'GD32F30X_XD': 'startup_gd32f30x_xd.s',
    'GD32F30X_CL': 'startup_gd32f30x_cl.s',
    'GD32F30X_HD': 'startup_gd32f30x_hd.s',
}

# Check each defined MCU, match the platform and append the appropriate startup file
for mcu, startup_file in mcu_startup_files.items():
    if mcu in env.get('CPPDEFINES', []):
        if rtconfig.PLATFORM in ['gcc']:
            src += [os.path.join(cwd, 'GD', 'GD32F30x', 'Source', 'GCC', startup_file)]
        elif rtconfig.PLATFORM in ['armcc', 'armclang']:
            src += [os.path.join(cwd, 'GD', 'GD32F30x', 'Source', 'ARM', startup_file)]
        elif rtconfig.PLATFORM in ['iccarm']:
            src += [os.path.join(cwd, 'GD', 'GD32F30x', 'Source', 'IAR', startup_file)]
        break

CPPDEFINES = ['USE_STDPERIPH_DRIVER']

group = DefineGroup('Libraries', src, depend = ['SOC_SERIES_GD32F30x'], CPPPATH = path, CPPDEFINES = CPPDEFINES)

Return('group')
